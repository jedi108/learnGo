/*

В этом примере горутина запускается, делает какую-то работу (в данном случае ждет 5 секунд),
затем закрывает канал.
Небуферизированные каналы всегда останавливают выполнение текущей горутины, пока не придет сообщение.
Закрытие канала сигнализирует горутине, что она может продолжить свое выполнение,
потому что больше никаких данных не может быть получено.
Закрытые каналы никогда не останавливают выполнение горутины.

*/
package main

import (
	"fmt"
	"time"
)

func main() {

	c := make(chan bool)

	go func() {
		// ... выполняем что-нибудь
		fmt.Println("Working")
		time.Sleep(time.Second * 5)
		close(c)
		fmt.Println("Close goroutines")
	}()

	// Ожидаем данные из канала. Останавливает выполнение до получения сообщения из канала или его закрытия.
	<-c

	fmt.Println("Done")
}
